// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.1
// source: button.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommonButtonService_GetButtonList_FullMethodName  = "/common_button.CommonButtonService/GetButtonList"
	CommonButtonService_ClickButton_FullMethodName    = "/common_button.CommonButtonService/ClickButton"
	CommonButtonService_OneClickFinish_FullMethodName = "/common_button.CommonButtonService/OneClickFinish"
)

// CommonButtonServiceClient is the client API for CommonButtonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonButtonServiceClient interface {
	// 获取按钮列表
	GetButtonList(ctx context.Context, in *GetButtonListReq, opts ...grpc.CallOption) (*GetButtonListRsp, error)
	// ClickButton 点击按钮
	ClickButton(ctx context.Context, in *ClickButtonReq, opts ...grpc.CallOption) (*ClickButtonRsp, error)
	// 一键领取所有奖品
	OneClickFinish(ctx context.Context, in *OneClickFinishReq, opts ...grpc.CallOption) (*OneClickFinishRsp, error)
}

type commonButtonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonButtonServiceClient(cc grpc.ClientConnInterface) CommonButtonServiceClient {
	return &commonButtonServiceClient{cc}
}

func (c *commonButtonServiceClient) GetButtonList(ctx context.Context, in *GetButtonListReq, opts ...grpc.CallOption) (*GetButtonListRsp, error) {
	out := new(GetButtonListRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_GetButtonList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) ClickButton(ctx context.Context, in *ClickButtonReq, opts ...grpc.CallOption) (*ClickButtonRsp, error) {
	out := new(ClickButtonRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_ClickButton_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonButtonServiceClient) OneClickFinish(ctx context.Context, in *OneClickFinishReq, opts ...grpc.CallOption) (*OneClickFinishRsp, error) {
	out := new(OneClickFinishRsp)
	err := c.cc.Invoke(ctx, CommonButtonService_OneClickFinish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonButtonServiceServer is the server API for CommonButtonService service.
// All implementations must embed UnimplementedCommonButtonServiceServer
// for forward compatibility
type CommonButtonServiceServer interface {
	// 获取按钮列表
	GetButtonList(context.Context, *GetButtonListReq) (*GetButtonListRsp, error)
	// ClickButton 点击按钮
	ClickButton(context.Context, *ClickButtonReq) (*ClickButtonRsp, error)
	// 一键领取所有奖品
	OneClickFinish(context.Context, *OneClickFinishReq) (*OneClickFinishRsp, error)
	mustEmbedUnimplementedCommonButtonServiceServer()
}

// UnimplementedCommonButtonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommonButtonServiceServer struct {
}

func (UnimplementedCommonButtonServiceServer) GetButtonList(context.Context, *GetButtonListReq) (*GetButtonListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetButtonList not implemented")
}
func (UnimplementedCommonButtonServiceServer) ClickButton(context.Context, *ClickButtonReq) (*ClickButtonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickButton not implemented")
}
func (UnimplementedCommonButtonServiceServer) OneClickFinish(context.Context, *OneClickFinishReq) (*OneClickFinishRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OneClickFinish not implemented")
}
func (UnimplementedCommonButtonServiceServer) mustEmbedUnimplementedCommonButtonServiceServer() {}

// UnsafeCommonButtonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonButtonServiceServer will
// result in compilation errors.
type UnsafeCommonButtonServiceServer interface {
	mustEmbedUnimplementedCommonButtonServiceServer()
}

func RegisterCommonButtonServiceServer(s grpc.ServiceRegistrar, srv CommonButtonServiceServer) {
	s.RegisterService(&CommonButtonService_ServiceDesc, srv)
}

func _CommonButtonService_GetButtonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetButtonListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).GetButtonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_GetButtonList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).GetButtonList(ctx, req.(*GetButtonListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_ClickButton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickButtonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).ClickButton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_ClickButton_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).ClickButton(ctx, req.(*ClickButtonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonButtonService_OneClickFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneClickFinishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonButtonServiceServer).OneClickFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonButtonService_OneClickFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonButtonServiceServer).OneClickFinish(ctx, req.(*OneClickFinishReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommonButtonService_ServiceDesc is the grpc.ServiceDesc for CommonButtonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonButtonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common_button.CommonButtonService",
	HandlerType: (*CommonButtonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetButtonList",
			Handler:    _CommonButtonService_GetButtonList_Handler,
		},
		{
			MethodName: "ClickButton",
			Handler:    _CommonButtonService_ClickButton_Handler,
		},
		{
			MethodName: "OneClickFinish",
			Handler:    _CommonButtonService_OneClickFinish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "button.proto",
}
