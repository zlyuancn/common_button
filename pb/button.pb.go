// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.1
// source: button.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ButtonModuleID int32

const (
	ButtonModuleID_BUTTON_MODULE_ID_UNKNOWN ButtonModuleID = 0
)

// Enum value maps for ButtonModuleID.
var (
	ButtonModuleID_name = map[int32]string{
		0: "BUTTON_MODULE_ID_UNKNOWN",
	}
	ButtonModuleID_value = map[string]int32{
		"BUTTON_MODULE_ID_UNKNOWN": 0,
	}
)

func (x ButtonModuleID) Enum() *ButtonModuleID {
	p := new(ButtonModuleID)
	*p = x
	return p
}

func (x ButtonModuleID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ButtonModuleID) Descriptor() protoreflect.EnumDescriptor {
	return file_button_proto_enumTypes[0].Descriptor()
}

func (ButtonModuleID) Type() protoreflect.EnumType {
	return &file_button_proto_enumTypes[0]
}

func (x ButtonModuleID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ButtonModuleID.Descriptor instead.
func (ButtonModuleID) EnumDescriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{0}
}

type ButtonSceneID int32

const (
	ButtonSceneID_BUTTON_SCENE_ID_UNKNOWN ButtonSceneID = 0
)

// Enum value maps for ButtonSceneID.
var (
	ButtonSceneID_name = map[int32]string{
		0: "BUTTON_SCENE_ID_UNKNOWN",
	}
	ButtonSceneID_value = map[string]int32{
		"BUTTON_SCENE_ID_UNKNOWN": 0,
	}
)

func (x ButtonSceneID) Enum() *ButtonSceneID {
	p := new(ButtonSceneID)
	*p = x
	return p
}

func (x ButtonSceneID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ButtonSceneID) Descriptor() protoreflect.EnumDescriptor {
	return file_button_proto_enumTypes[1].Descriptor()
}

func (ButtonSceneID) Type() protoreflect.EnumType {
	return &file_button_proto_enumTypes[1]
}

func (x ButtonSceneID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ButtonSceneID.Descriptor instead.
func (ButtonSceneID) EnumDescriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{1}
}

// 任务周期类型
type TaskPeriodType int32

const (
	TaskPeriodType_TASK_PERIOD_TYPE_NONE  TaskPeriodType = 0 // 无周期
	TaskPeriodType_TASK_PERIOD_TYPE_DAY   TaskPeriodType = 1 // 自然日
	TaskPeriodType_TASK_PERIOD_TYPE_WEEK  TaskPeriodType = 2 // 自然周
	TaskPeriodType_TASK_PERIOD_TYPE_MONTH TaskPeriodType = 3 // 自然月
)

// Enum value maps for TaskPeriodType.
var (
	TaskPeriodType_name = map[int32]string{
		0: "TASK_PERIOD_TYPE_NONE",
		1: "TASK_PERIOD_TYPE_DAY",
		2: "TASK_PERIOD_TYPE_WEEK",
		3: "TASK_PERIOD_TYPE_MONTH",
	}
	TaskPeriodType_value = map[string]int32{
		"TASK_PERIOD_TYPE_NONE":  0,
		"TASK_PERIOD_TYPE_DAY":   1,
		"TASK_PERIOD_TYPE_WEEK":  2,
		"TASK_PERIOD_TYPE_MONTH": 3,
	}
)

func (x TaskPeriodType) Enum() *TaskPeriodType {
	p := new(TaskPeriodType)
	*p = x
	return p
}

func (x TaskPeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskPeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_button_proto_enumTypes[2].Descriptor()
}

func (TaskPeriodType) Type() protoreflect.EnumType {
	return &file_button_proto_enumTypes[2]
}

func (x TaskPeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskPeriodType.Descriptor instead.
func (TaskPeriodType) EnumDescriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{2}
}

// 任务隐藏规则
type TaskHideRule int32

const (
	TaskHideRule_TASK_HIDE_RULE_NONE     TaskHideRule = 0
	TaskHideRule_TASK_HIDE_RULE_FINISHED TaskHideRule = 1 // 完成后隐藏
	TaskHideRule_TASK_HIDE_RULE_RECEIVED TaskHideRule = 2 // 领奖后隐藏
)

// Enum value maps for TaskHideRule.
var (
	TaskHideRule_name = map[int32]string{
		0: "TASK_HIDE_RULE_NONE",
		1: "TASK_HIDE_RULE_FINISHED",
		2: "TASK_HIDE_RULE_RECEIVED",
	}
	TaskHideRule_value = map[string]int32{
		"TASK_HIDE_RULE_NONE":     0,
		"TASK_HIDE_RULE_FINISHED": 1,
		"TASK_HIDE_RULE_RECEIVED": 2,
	}
)

func (x TaskHideRule) Enum() *TaskHideRule {
	p := new(TaskHideRule)
	*p = x
	return p
}

func (x TaskHideRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskHideRule) Descriptor() protoreflect.EnumDescriptor {
	return file_button_proto_enumTypes[3].Descriptor()
}

func (TaskHideRule) Type() protoreflect.EnumType {
	return &file_button_proto_enumTypes[3]
}

func (x TaskHideRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskHideRule.Descriptor instead.
func (TaskHideRule) EnumDescriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{3}
}

// 任务类型
type TaskType int32

const (
	TaskType_TASK_TYPE_UNKNOWN TaskType = 0
	TaskType_TASK_TYPE_JUMP    TaskType = 1 // 跳转任务
	TaskType_TASK_TYPE_CHECKIN TaskType = 2 // 签到
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "TASK_TYPE_UNKNOWN",
		1: "TASK_TYPE_JUMP",
		2: "TASK_TYPE_CHECKIN",
	}
	TaskType_value = map[string]int32{
		"TASK_TYPE_UNKNOWN": 0,
		"TASK_TYPE_JUMP":    1,
		"TASK_TYPE_CHECKIN": 2,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_button_proto_enumTypes[4].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_button_proto_enumTypes[4]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{4}
}

// 任务完成状态
type TaskFinishStatus int32

const (
	TaskFinishStatus_TASK_FINISH_STATUS_UNFINISHED TaskFinishStatus = 0 // 未完成
	TaskFinishStatus_TASK_FINISH_STATUS_FINISHED   TaskFinishStatus = 1 // 已完成
	TaskFinishStatus_TASK_FINISH_STATUS_RECEIVED   TaskFinishStatus = 2 // 已领取
	TaskFinishStatus_TASK_FINISH_STATUS_HIDED      TaskFinishStatus = 3 // 已隐藏
)

// Enum value maps for TaskFinishStatus.
var (
	TaskFinishStatus_name = map[int32]string{
		0: "TASK_FINISH_STATUS_UNFINISHED",
		1: "TASK_FINISH_STATUS_FINISHED",
		2: "TASK_FINISH_STATUS_RECEIVED",
		3: "TASK_FINISH_STATUS_HIDED",
	}
	TaskFinishStatus_value = map[string]int32{
		"TASK_FINISH_STATUS_UNFINISHED": 0,
		"TASK_FINISH_STATUS_FINISHED":   1,
		"TASK_FINISH_STATUS_RECEIVED":   2,
		"TASK_FINISH_STATUS_HIDED":      3,
	}
)

func (x TaskFinishStatus) Enum() *TaskFinishStatus {
	p := new(TaskFinishStatus)
	*p = x
	return p
}

func (x TaskFinishStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskFinishStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_button_proto_enumTypes[5].Descriptor()
}

func (TaskFinishStatus) Type() protoreflect.EnumType {
	return &file_button_proto_enumTypes[5]
}

func (x TaskFinishStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskFinishStatus.Descriptor instead.
func (TaskFinishStatus) EnumDescriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{5}
}

type GetButtonListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId ButtonModuleID  `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3,enum=common_button.ButtonModuleID" json:"module_id,omitempty"`    // 区分业务id
	SceneId  []ButtonSceneID `protobuf:"varint,2,rep,packed,name=scene_id,json=sceneId,proto3,enum=common_button.ButtonSceneID" json:"scene_id,omitempty"` // 区分场景id, 空列表表示拉取全部场景
}

func (x *GetButtonListReq) Reset() {
	*x = GetButtonListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_button_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetButtonListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetButtonListReq) ProtoMessage() {}

func (x *GetButtonListReq) ProtoReflect() protoreflect.Message {
	mi := &file_button_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetButtonListReq.ProtoReflect.Descriptor instead.
func (*GetButtonListReq) Descriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{0}
}

func (x *GetButtonListReq) GetModuleId() ButtonModuleID {
	if x != nil {
		return x.ModuleId
	}
	return ButtonModuleID_BUTTON_MODULE_ID_UNKNOWN
}

func (x *GetButtonListReq) GetSceneId() []ButtonSceneID {
	if x != nil {
		return x.SceneId
	}
	return nil
}

type GetButtonListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buttons []*Button `protobuf:"bytes,1,rep,name=buttons,proto3" json:"buttons,omitempty"` // 按钮列表
}

func (x *GetButtonListRsp) Reset() {
	*x = GetButtonListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_button_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetButtonListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetButtonListRsp) ProtoMessage() {}

func (x *GetButtonListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_button_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetButtonListRsp.ProtoReflect.Descriptor instead.
func (*GetButtonListRsp) Descriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{1}
}

func (x *GetButtonListRsp) GetButtons() []*Button {
	if x != nil {
		return x.Buttons
	}
	return nil
}

type ClickButtonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ButtonId int32 `protobuf:"varint,1,opt,name=button_id,json=buttonId,proto3" json:"button_id,omitempty"`
}

func (x *ClickButtonReq) Reset() {
	*x = ClickButtonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_button_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickButtonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickButtonReq) ProtoMessage() {}

func (x *ClickButtonReq) ProtoReflect() protoreflect.Message {
	mi := &file_button_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickButtonReq.ProtoReflect.Descriptor instead.
func (*ClickButtonReq) Descriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{2}
}

func (x *ClickButtonReq) GetButtonId() int32 {
	if x != nil {
		return x.ButtonId
	}
	return 0
}

type ClickButtonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskState *ClickTaskState `protobuf:"bytes,1,opt,name=task_state,json=taskState,proto3" json:"task_state,omitempty"` // 任务状态
}

func (x *ClickButtonRsp) Reset() {
	*x = ClickButtonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_button_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickButtonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickButtonRsp) ProtoMessage() {}

func (x *ClickButtonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_button_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickButtonRsp.ProtoReflect.Descriptor instead.
func (*ClickButtonRsp) Descriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{3}
}

func (x *ClickButtonRsp) GetTaskState() *ClickTaskState {
	if x != nil {
		return x.TaskState
	}
	return nil
}

type OneClickFinishReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId ButtonModuleID `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3,enum=common_button.ButtonModuleID" json:"module_id,omitempty"` // 区分业务id
	SceneId  ButtonSceneID  `protobuf:"varint,2,opt,name=scene_id,json=sceneId,proto3,enum=common_button.ButtonSceneID" json:"scene_id,omitempty"`     // 区分场景id, 空列表表示拉取全部场景
}

func (x *OneClickFinishReq) Reset() {
	*x = OneClickFinishReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_button_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneClickFinishReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneClickFinishReq) ProtoMessage() {}

func (x *OneClickFinishReq) ProtoReflect() protoreflect.Message {
	mi := &file_button_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneClickFinishReq.ProtoReflect.Descriptor instead.
func (*OneClickFinishReq) Descriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{4}
}

func (x *OneClickFinishReq) GetModuleId() ButtonModuleID {
	if x != nil {
		return x.ModuleId
	}
	return ButtonModuleID_BUTTON_MODULE_ID_UNKNOWN
}

func (x *OneClickFinishReq) GetSceneId() ButtonSceneID {
	if x != nil {
		return x.SceneId
	}
	return ButtonSceneID_BUTTON_SCENE_ID_UNKNOWN
}

type OneClickFinishRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskState []*ClickTaskState `protobuf:"bytes,1,rep,name=task_state,json=taskState,proto3" json:"task_state,omitempty"` // 任务状态
}

func (x *OneClickFinishRsp) Reset() {
	*x = OneClickFinishRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_button_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneClickFinishRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneClickFinishRsp) ProtoMessage() {}

func (x *OneClickFinishRsp) ProtoReflect() protoreflect.Message {
	mi := &file_button_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneClickFinishRsp.ProtoReflect.Descriptor instead.
func (*OneClickFinishRsp) Descriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{5}
}

func (x *OneClickFinishRsp) GetTaskState() []*ClickTaskState {
	if x != nil {
		return x.TaskState
	}
	return nil
}

// 按钮
type Button struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId     ButtonModuleID `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3,enum=common_button.ButtonModuleID" json:"module_id,omitempty"` // 模块id
	SceneId      ButtonSceneID  `protobuf:"varint,2,opt,name=scene_id,json=sceneId,proto3,enum=common_button.ButtonSceneID" json:"scene_id,omitempty"`     // 场景id
	ButtonId     int32          `protobuf:"varint,3,opt,name=button_id,json=buttonId,proto3" json:"button_id,omitempty"`                                   // 按钮id
	ButtonTitle  string         `protobuf:"bytes,4,opt,name=button_title,json=buttonTitle,proto3" json:"button_title,omitempty"`                           // 按钮标题
	ButtonDesc   string         `protobuf:"bytes,5,opt,name=button_desc,json=buttonDesc,proto3" json:"button_desc,omitempty"`                              // 按钮描述
	Icon1        string         `protobuf:"bytes,6,opt,name=icon1,proto3" json:"icon1,omitempty"`                                                          // 图片1
	Icon2        string         `protobuf:"bytes,7,opt,name=Icon2,proto3" json:"Icon2,omitempty"`                                                          // 图片2
	Icon3        string         `protobuf:"bytes,8,opt,name=Icon3,proto3" json:"Icon3,omitempty"`                                                          // 图片3
	SortValue    int32          `protobuf:"varint,9,opt,name=sort_value,json=sortValue,proto3" json:"sort_value,omitempty"`                                // 正序，排序值相同时以创建时间正序
	SkipValue    string         `protobuf:"bytes,10,opt,name=skip_value,json=skipValue,proto3" json:"skip_value,omitempty"`                                // 跳转地址
	SkipTitle    string         `protobuf:"bytes,11,opt,name=skip_title,json=skipTitle,proto3" json:"skip_title,omitempty"`                                // 跳转按钮标题
	ButtonExtend string         `protobuf:"bytes,12,opt,name=button_extend,json=buttonExtend,proto3" json:"button_extend,omitempty"`                       // 按钮扩展数据
	Task         *Task          `protobuf:"bytes,13,opt,name=task,proto3" json:"task,omitempty"`                                                           // 任务
	TaskState    *TaskState     `protobuf:"bytes,14,opt,name=task_state,json=taskState,proto3" json:"task_state,omitempty"`                                // 任务状态
}

func (x *Button) Reset() {
	*x = Button{}
	if protoimpl.UnsafeEnabled {
		mi := &file_button_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Button) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Button) ProtoMessage() {}

func (x *Button) ProtoReflect() protoreflect.Message {
	mi := &file_button_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Button.ProtoReflect.Descriptor instead.
func (*Button) Descriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{6}
}

func (x *Button) GetModuleId() ButtonModuleID {
	if x != nil {
		return x.ModuleId
	}
	return ButtonModuleID_BUTTON_MODULE_ID_UNKNOWN
}

func (x *Button) GetSceneId() ButtonSceneID {
	if x != nil {
		return x.SceneId
	}
	return ButtonSceneID_BUTTON_SCENE_ID_UNKNOWN
}

func (x *Button) GetButtonId() int32 {
	if x != nil {
		return x.ButtonId
	}
	return 0
}

func (x *Button) GetButtonTitle() string {
	if x != nil {
		return x.ButtonTitle
	}
	return ""
}

func (x *Button) GetButtonDesc() string {
	if x != nil {
		return x.ButtonDesc
	}
	return ""
}

func (x *Button) GetIcon1() string {
	if x != nil {
		return x.Icon1
	}
	return ""
}

func (x *Button) GetIcon2() string {
	if x != nil {
		return x.Icon2
	}
	return ""
}

func (x *Button) GetIcon3() string {
	if x != nil {
		return x.Icon3
	}
	return ""
}

func (x *Button) GetSortValue() int32 {
	if x != nil {
		return x.SortValue
	}
	return 0
}

func (x *Button) GetSkipValue() string {
	if x != nil {
		return x.SkipValue
	}
	return ""
}

func (x *Button) GetSkipTitle() string {
	if x != nil {
		return x.SkipTitle
	}
	return ""
}

func (x *Button) GetButtonExtend() string {
	if x != nil {
		return x.ButtonExtend
	}
	return ""
}

func (x *Button) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *Button) GetTaskState() *TaskState {
	if x != nil {
		return x.TaskState
	}
	return nil
}

// 任务
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId             int32          `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                                             // 任务id
	StartTime          int32          `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                    // 任务开始时间, 秒级时间戳
	EndTime            int32          `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                          // 任务结束时间, 秒级时间戳
	TaskTarget         int32          `protobuf:"varint,4,opt,name=task_target,json=taskTarget,proto3" json:"task_target,omitempty"`                                                 // 任务目标
	Prizes             []*Prize       `protobuf:"bytes,5,rep,name=prizes,proto3" json:"prizes,omitempty"`                                                                            // 奖品列表
	TaskHideRule       []TaskHideRule `protobuf:"varint,6,rep,packed,name=task_hide_rule,json=taskHideRule,proto3,enum=common_button.TaskHideRule" json:"task_hide_rule,omitempty"`  // 隐藏规则列表
	TaskExtend         string         `protobuf:"bytes,7,opt,name=task_extend,json=taskExtend,proto3" json:"task_extend,omitempty"`                                                  // 任务扩展数据
	TaskPeriodType     TaskPeriodType `protobuf:"varint,8,opt,name=task_period_type,json=taskPeriodType,proto3,enum=common_button.TaskPeriodType" json:"task_period_type,omitempty"` // 任务周期
	TaskType           TaskType       `protobuf:"varint,9,opt,name=task_type,json=taskType,proto3,enum=common_button.TaskType" json:"task_type,omitempty"`                           // 任务类型
	TaskTemplateExtend string         `protobuf:"bytes,10,opt,name=task_template_extend,json=taskTemplateExtend,proto3" json:"task_template_extend,omitempty"`                       // 任务模板扩展数据
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_button_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_button_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{7}
}

func (x *Task) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Task) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Task) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Task) GetTaskTarget() int32 {
	if x != nil {
		return x.TaskTarget
	}
	return 0
}

func (x *Task) GetPrizes() []*Prize {
	if x != nil {
		return x.Prizes
	}
	return nil
}

func (x *Task) GetTaskHideRule() []TaskHideRule {
	if x != nil {
		return x.TaskHideRule
	}
	return nil
}

func (x *Task) GetTaskExtend() string {
	if x != nil {
		return x.TaskExtend
	}
	return ""
}

func (x *Task) GetTaskPeriodType() TaskPeriodType {
	if x != nil {
		return x.TaskPeriodType
	}
	return TaskPeriodType_TASK_PERIOD_TYPE_NONE
}

func (x *Task) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_TASK_TYPE_UNKNOWN
}

func (x *Task) GetTaskTemplateExtend() string {
	if x != nil {
		return x.TaskTemplateExtend
	}
	return ""
}

// 任务状态
type TaskState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskProgress int32            `protobuf:"varint,1,opt,name=task_progress,json=taskProgress,proto3" json:"task_progress,omitempty"`                                     // 任务进度
	FinishStatus TaskFinishStatus `protobuf:"varint,2,opt,name=finish_status,json=finishStatus,proto3,enum=common_button.TaskFinishStatus" json:"finish_status,omitempty"` // 任务完成状态
}

func (x *TaskState) Reset() {
	*x = TaskState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_button_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskState) ProtoMessage() {}

func (x *TaskState) ProtoReflect() protoreflect.Message {
	mi := &file_button_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskState.ProtoReflect.Descriptor instead.
func (*TaskState) Descriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{8}
}

func (x *TaskState) GetTaskProgress() int32 {
	if x != nil {
		return x.TaskProgress
	}
	return 0
}

func (x *TaskState) GetFinishStatus() TaskFinishStatus {
	if x != nil {
		return x.FinishStatus
	}
	return TaskFinishStatus_TASK_FINISH_STATUS_UNFINISHED
}

// 点击后返回的任务状态
type ClickTaskState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ButtonId     int32            `protobuf:"varint,1,opt,name=button_id,json=buttonId,proto3" json:"button_id,omitempty"`                                                 // 按钮id
	TaskId       int32            `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                                       // 任务id
	FinishStatus TaskFinishStatus `protobuf:"varint,3,opt,name=finish_status,json=finishStatus,proto3,enum=common_button.TaskFinishStatus" json:"finish_status,omitempty"` // 任务完成状态
	Prizes       []*Prize         `protobuf:"bytes,4,rep,name=prizes,proto3" json:"prizes,omitempty"`                                                                      // 奖品列表
	SkipTitle    string           `protobuf:"bytes,5,opt,name=skip_title,json=skipTitle,proto3" json:"skip_title,omitempty"`                                               // 新的跳转按钮标题
}

func (x *ClickTaskState) Reset() {
	*x = ClickTaskState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_button_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickTaskState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickTaskState) ProtoMessage() {}

func (x *ClickTaskState) ProtoReflect() protoreflect.Message {
	mi := &file_button_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickTaskState.ProtoReflect.Descriptor instead.
func (*ClickTaskState) Descriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{9}
}

func (x *ClickTaskState) GetButtonId() int32 {
	if x != nil {
		return x.ButtonId
	}
	return 0
}

func (x *ClickTaskState) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ClickTaskState) GetFinishStatus() TaskFinishStatus {
	if x != nil {
		return x.FinishStatus
	}
	return TaskFinishStatus_TASK_FINISH_STATUS_UNFINISHED
}

func (x *ClickTaskState) GetPrizes() []*Prize {
	if x != nil {
		return x.Prizes
	}
	return nil
}

func (x *ClickTaskState) GetSkipTitle() string {
	if x != nil {
		return x.SkipTitle
	}
	return ""
}

// 奖品
type Prize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrizeId   string `protobuf:"bytes,1,opt,name=prize_id,json=prizeId,proto3" json:"prize_id,omitempty"`       // 奖品id
	PrizeName string `protobuf:"bytes,2,opt,name=prize_name,json=prizeName,proto3" json:"prize_name,omitempty"` // 奖品名称
	PrizeUrl  string `protobuf:"bytes,3,opt,name=prize_url,json=prizeUrl,proto3" json:"prize_url,omitempty"`    // 奖品图片url
}

func (x *Prize) Reset() {
	*x = Prize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_button_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prize) ProtoMessage() {}

func (x *Prize) ProtoReflect() protoreflect.Message {
	mi := &file_button_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prize.ProtoReflect.Descriptor instead.
func (*Prize) Descriptor() ([]byte, []int) {
	return file_button_proto_rawDescGZIP(), []int{10}
}

func (x *Prize) GetPrizeId() string {
	if x != nil {
		return x.PrizeId
	}
	return ""
}

func (x *Prize) GetPrizeName() string {
	if x != nil {
		return x.PrizeName
	}
	return ""
}

func (x *Prize) GetPrizeUrl() string {
	if x != nil {
		return x.PrizeUrl
	}
	return ""
}

var File_button_proto protoreflect.FileDescriptor

var file_button_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x44, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x07, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x52, 0x07, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x22, 0x2d, 0x0a, 0x0e, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x0e, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x4f, 0x6e,
	0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12,
	0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x44, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x07, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x11, 0x4f, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x84, 0x04, 0x0a, 0x06, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x07,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x63, 0x6f, 0x6e,
	0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x63, 0x6f, 0x6e, 0x31, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x63, 0x6f, 0x6e, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49,
	0x63, 0x6f, 0x6e, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x63, 0x6f, 0x6e, 0x33, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x63, 0x6f, 0x6e, 0x33, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6b, 0x69, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6b,
	0x69, 0x70, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbd,
	0x03, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x70,
	0x72, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x69, 0x64, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c,
	0x74, 0x61, 0x73, 0x6b, 0x48, 0x69, 0x64, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x47, 0x0a,
	0x10, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x22, 0x76,
	0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x44, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69,
	0x7a, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x22, 0x5e, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x7a,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x55,
	0x72, 0x6c, 0x2a, 0x2e, 0x0a, 0x0e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x2a, 0x2c, 0x0a, 0x0d, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x2a, 0x7c, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03, 0x2a, 0x61,
	0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x69, 0x64, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x48, 0x49, 0x44, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x48, 0x49, 0x44,
	0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x02, 0x2a, 0x4c, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49, 0x4e, 0x10, 0x02, 0x2a,
	0x95, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x48, 0x49, 0x44, 0x45, 0x44, 0x10, 0x03, 0x32, 0x82, 0x03, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x79, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x73, 0x70, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0b, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22,
	0x19, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2f, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a,
	0x0e, 0x4f, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2e,
	0x4f, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x2e, 0x4f, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x52, 0x73, 0x70, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x2f, 0x4f, 0x6e, 0x65, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x42, 0x26, 0x5a, 0x24,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x6c, 0x79, 0x75, 0x61,
	0x6e, 0x63, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_button_proto_rawDescOnce sync.Once
	file_button_proto_rawDescData = file_button_proto_rawDesc
)

func file_button_proto_rawDescGZIP() []byte {
	file_button_proto_rawDescOnce.Do(func() {
		file_button_proto_rawDescData = protoimpl.X.CompressGZIP(file_button_proto_rawDescData)
	})
	return file_button_proto_rawDescData
}

var file_button_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_button_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_button_proto_goTypes = []interface{}{
	(ButtonModuleID)(0),       // 0: common_button.ButtonModuleID
	(ButtonSceneID)(0),        // 1: common_button.ButtonSceneID
	(TaskPeriodType)(0),       // 2: common_button.TaskPeriodType
	(TaskHideRule)(0),         // 3: common_button.TaskHideRule
	(TaskType)(0),             // 4: common_button.TaskType
	(TaskFinishStatus)(0),     // 5: common_button.TaskFinishStatus
	(*GetButtonListReq)(nil),  // 6: common_button.GetButtonListReq
	(*GetButtonListRsp)(nil),  // 7: common_button.GetButtonListRsp
	(*ClickButtonReq)(nil),    // 8: common_button.ClickButtonReq
	(*ClickButtonRsp)(nil),    // 9: common_button.ClickButtonRsp
	(*OneClickFinishReq)(nil), // 10: common_button.OneClickFinishReq
	(*OneClickFinishRsp)(nil), // 11: common_button.OneClickFinishRsp
	(*Button)(nil),            // 12: common_button.Button
	(*Task)(nil),              // 13: common_button.Task
	(*TaskState)(nil),         // 14: common_button.TaskState
	(*ClickTaskState)(nil),    // 15: common_button.ClickTaskState
	(*Prize)(nil),             // 16: common_button.Prize
}
var file_button_proto_depIdxs = []int32{
	0,  // 0: common_button.GetButtonListReq.module_id:type_name -> common_button.ButtonModuleID
	1,  // 1: common_button.GetButtonListReq.scene_id:type_name -> common_button.ButtonSceneID
	12, // 2: common_button.GetButtonListRsp.buttons:type_name -> common_button.Button
	15, // 3: common_button.ClickButtonRsp.task_state:type_name -> common_button.ClickTaskState
	0,  // 4: common_button.OneClickFinishReq.module_id:type_name -> common_button.ButtonModuleID
	1,  // 5: common_button.OneClickFinishReq.scene_id:type_name -> common_button.ButtonSceneID
	15, // 6: common_button.OneClickFinishRsp.task_state:type_name -> common_button.ClickTaskState
	0,  // 7: common_button.Button.module_id:type_name -> common_button.ButtonModuleID
	1,  // 8: common_button.Button.scene_id:type_name -> common_button.ButtonSceneID
	13, // 9: common_button.Button.task:type_name -> common_button.Task
	14, // 10: common_button.Button.task_state:type_name -> common_button.TaskState
	16, // 11: common_button.Task.prizes:type_name -> common_button.Prize
	3,  // 12: common_button.Task.task_hide_rule:type_name -> common_button.TaskHideRule
	2,  // 13: common_button.Task.task_period_type:type_name -> common_button.TaskPeriodType
	4,  // 14: common_button.Task.task_type:type_name -> common_button.TaskType
	5,  // 15: common_button.TaskState.finish_status:type_name -> common_button.TaskFinishStatus
	5,  // 16: common_button.ClickTaskState.finish_status:type_name -> common_button.TaskFinishStatus
	16, // 17: common_button.ClickTaskState.prizes:type_name -> common_button.Prize
	6,  // 18: common_button.CommonButtonService.GetButtonList:input_type -> common_button.GetButtonListReq
	8,  // 19: common_button.CommonButtonService.ClickButton:input_type -> common_button.ClickButtonReq
	10, // 20: common_button.CommonButtonService.OneClickFinish:input_type -> common_button.OneClickFinishReq
	7,  // 21: common_button.CommonButtonService.GetButtonList:output_type -> common_button.GetButtonListRsp
	9,  // 22: common_button.CommonButtonService.ClickButton:output_type -> common_button.ClickButtonRsp
	11, // 23: common_button.CommonButtonService.OneClickFinish:output_type -> common_button.OneClickFinishRsp
	21, // [21:24] is the sub-list for method output_type
	18, // [18:21] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_button_proto_init() }
func file_button_proto_init() {
	if File_button_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_button_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetButtonListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_button_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetButtonListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_button_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickButtonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_button_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickButtonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_button_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneClickFinishReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_button_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneClickFinishRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_button_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Button); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_button_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_button_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_button_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickTaskState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_button_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_button_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_button_proto_goTypes,
		DependencyIndexes: file_button_proto_depIdxs,
		EnumInfos:         file_button_proto_enumTypes,
		MessageInfos:      file_button_proto_msgTypes,
	}.Build()
	File_button_proto = out.File
	file_button_proto_rawDesc = nil
	file_button_proto_goTypes = nil
	file_button_proto_depIdxs = nil
}
