// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: button.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetButtonListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetButtonListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetButtonListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetButtonListReqMultiError, or nil if none found.
func (m *GetButtonListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetButtonListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ModuleId

	if len(errors) > 0 {
		return GetButtonListReqMultiError(errors)
	}

	return nil
}

// GetButtonListReqMultiError is an error wrapping multiple validation errors
// returned by GetButtonListReq.ValidateAll() if the designated constraints
// aren't met.
type GetButtonListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetButtonListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetButtonListReqMultiError) AllErrors() []error { return m }

// GetButtonListReqValidationError is the validation error returned by
// GetButtonListReq.Validate if the designated constraints aren't met.
type GetButtonListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetButtonListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetButtonListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetButtonListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetButtonListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetButtonListReqValidationError) ErrorName() string { return "GetButtonListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetButtonListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetButtonListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetButtonListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetButtonListReqValidationError{}

// Validate checks the field values on GetButtonListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetButtonListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetButtonListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetButtonListRspMultiError, or nil if none found.
func (m *GetButtonListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetButtonListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetButtons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetButtonListRspValidationError{
						field:  fmt.Sprintf("Buttons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetButtonListRspValidationError{
						field:  fmt.Sprintf("Buttons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetButtonListRspValidationError{
					field:  fmt.Sprintf("Buttons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetButtonListRspMultiError(errors)
	}

	return nil
}

// GetButtonListRspMultiError is an error wrapping multiple validation errors
// returned by GetButtonListRsp.ValidateAll() if the designated constraints
// aren't met.
type GetButtonListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetButtonListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetButtonListRspMultiError) AllErrors() []error { return m }

// GetButtonListRspValidationError is the validation error returned by
// GetButtonListRsp.Validate if the designated constraints aren't met.
type GetButtonListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetButtonListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetButtonListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetButtonListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetButtonListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetButtonListRspValidationError) ErrorName() string { return "GetButtonListRspValidationError" }

// Error satisfies the builtin error interface
func (e GetButtonListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetButtonListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetButtonListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetButtonListRspValidationError{}

// Validate checks the field values on ClickButtonReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClickButtonReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClickButtonReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClickButtonReqMultiError,
// or nil if none found.
func (m *ClickButtonReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ClickButtonReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ButtonId

	if len(errors) > 0 {
		return ClickButtonReqMultiError(errors)
	}

	return nil
}

// ClickButtonReqMultiError is an error wrapping multiple validation errors
// returned by ClickButtonReq.ValidateAll() if the designated constraints
// aren't met.
type ClickButtonReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClickButtonReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClickButtonReqMultiError) AllErrors() []error { return m }

// ClickButtonReqValidationError is the validation error returned by
// ClickButtonReq.Validate if the designated constraints aren't met.
type ClickButtonReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClickButtonReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClickButtonReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClickButtonReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClickButtonReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClickButtonReqValidationError) ErrorName() string { return "ClickButtonReqValidationError" }

// Error satisfies the builtin error interface
func (e ClickButtonReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClickButtonReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClickButtonReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClickButtonReqValidationError{}

// Validate checks the field values on ClickButtonRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClickButtonRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClickButtonRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClickButtonRspMultiError,
// or nil if none found.
func (m *ClickButtonRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ClickButtonRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTaskState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClickButtonRspValidationError{
					field:  "TaskState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClickButtonRspValidationError{
					field:  "TaskState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClickButtonRspValidationError{
				field:  "TaskState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClickButtonRspMultiError(errors)
	}

	return nil
}

// ClickButtonRspMultiError is an error wrapping multiple validation errors
// returned by ClickButtonRsp.ValidateAll() if the designated constraints
// aren't met.
type ClickButtonRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClickButtonRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClickButtonRspMultiError) AllErrors() []error { return m }

// ClickButtonRspValidationError is the validation error returned by
// ClickButtonRsp.Validate if the designated constraints aren't met.
type ClickButtonRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClickButtonRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClickButtonRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClickButtonRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClickButtonRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClickButtonRspValidationError) ErrorName() string { return "ClickButtonRspValidationError" }

// Error satisfies the builtin error interface
func (e ClickButtonRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClickButtonRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClickButtonRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClickButtonRspValidationError{}

// Validate checks the field values on OneClickFinishReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OneClickFinishReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneClickFinishReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OneClickFinishReqMultiError, or nil if none found.
func (m *OneClickFinishReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OneClickFinishReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ModuleId

	// no validation rules for SceneId

	if len(errors) > 0 {
		return OneClickFinishReqMultiError(errors)
	}

	return nil
}

// OneClickFinishReqMultiError is an error wrapping multiple validation errors
// returned by OneClickFinishReq.ValidateAll() if the designated constraints
// aren't met.
type OneClickFinishReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneClickFinishReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneClickFinishReqMultiError) AllErrors() []error { return m }

// OneClickFinishReqValidationError is the validation error returned by
// OneClickFinishReq.Validate if the designated constraints aren't met.
type OneClickFinishReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneClickFinishReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneClickFinishReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneClickFinishReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneClickFinishReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneClickFinishReqValidationError) ErrorName() string {
	return "OneClickFinishReqValidationError"
}

// Error satisfies the builtin error interface
func (e OneClickFinishReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneClickFinishReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneClickFinishReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneClickFinishReqValidationError{}

// Validate checks the field values on OneClickFinishRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OneClickFinishRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneClickFinishRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OneClickFinishRspMultiError, or nil if none found.
func (m *OneClickFinishRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *OneClickFinishRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTaskState() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OneClickFinishRspValidationError{
						field:  fmt.Sprintf("TaskState[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OneClickFinishRspValidationError{
						field:  fmt.Sprintf("TaskState[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OneClickFinishRspValidationError{
					field:  fmt.Sprintf("TaskState[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OneClickFinishRspMultiError(errors)
	}

	return nil
}

// OneClickFinishRspMultiError is an error wrapping multiple validation errors
// returned by OneClickFinishRsp.ValidateAll() if the designated constraints
// aren't met.
type OneClickFinishRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneClickFinishRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneClickFinishRspMultiError) AllErrors() []error { return m }

// OneClickFinishRspValidationError is the validation error returned by
// OneClickFinishRsp.Validate if the designated constraints aren't met.
type OneClickFinishRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneClickFinishRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneClickFinishRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneClickFinishRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneClickFinishRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneClickFinishRspValidationError) ErrorName() string {
	return "OneClickFinishRspValidationError"
}

// Error satisfies the builtin error interface
func (e OneClickFinishRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneClickFinishRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneClickFinishRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneClickFinishRspValidationError{}

// Validate checks the field values on Button with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Button) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Button with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ButtonMultiError, or nil if none found.
func (m *Button) ValidateAll() error {
	return m.validate(true)
}

func (m *Button) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ModuleId

	// no validation rules for SceneId

	// no validation rules for ButtonId

	// no validation rules for ButtonTitle

	// no validation rules for ButtonDesc

	// no validation rules for Icon1

	// no validation rules for Icon2

	// no validation rules for Icon3

	// no validation rules for SortValue

	// no validation rules for SkipValue

	// no validation rules for SkipTitle

	// no validation rules for ButtonExtend

	if all {
		switch v := interface{}(m.GetTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ButtonValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ButtonValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ButtonValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaskState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ButtonValidationError{
					field:  "TaskState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ButtonValidationError{
					field:  "TaskState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ButtonValidationError{
				field:  "TaskState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ButtonMultiError(errors)
	}

	return nil
}

// ButtonMultiError is an error wrapping multiple validation errors returned by
// Button.ValidateAll() if the designated constraints aren't met.
type ButtonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ButtonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ButtonMultiError) AllErrors() []error { return m }

// ButtonValidationError is the validation error returned by Button.Validate if
// the designated constraints aren't met.
type ButtonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ButtonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ButtonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ButtonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ButtonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ButtonValidationError) ErrorName() string { return "ButtonValidationError" }

// Error satisfies the builtin error interface
func (e ButtonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sButton.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ButtonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ButtonValidationError{}

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Task) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaskMultiError, or nil if none found.
func (m *Task) ValidateAll() error {
	return m.validate(true)
}

func (m *Task) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for TaskTarget

	for idx, item := range m.GetPrizes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  fmt.Sprintf("Prizes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  fmt.Sprintf("Prizes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  fmt.Sprintf("Prizes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TaskExtend

	// no validation rules for TaskPeriodType

	// no validation rules for TaskType

	// no validation rules for TaskTemplateExtend

	if len(errors) > 0 {
		return TaskMultiError(errors)
	}

	return nil
}

// TaskMultiError is an error wrapping multiple validation errors returned by
// Task.ValidateAll() if the designated constraints aren't met.
type TaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskMultiError) AllErrors() []error { return m }

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}

// Validate checks the field values on TaskState with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskState with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskStateMultiError, or nil
// if none found.
func (m *TaskState) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskProgress

	// no validation rules for FinishStatus

	if len(errors) > 0 {
		return TaskStateMultiError(errors)
	}

	return nil
}

// TaskStateMultiError is an error wrapping multiple validation errors returned
// by TaskState.ValidateAll() if the designated constraints aren't met.
type TaskStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskStateMultiError) AllErrors() []error { return m }

// TaskStateValidationError is the validation error returned by
// TaskState.Validate if the designated constraints aren't met.
type TaskStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskStateValidationError) ErrorName() string { return "TaskStateValidationError" }

// Error satisfies the builtin error interface
func (e TaskStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskStateValidationError{}

// Validate checks the field values on ClickTaskState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClickTaskState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClickTaskState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClickTaskStateMultiError,
// or nil if none found.
func (m *ClickTaskState) ValidateAll() error {
	return m.validate(true)
}

func (m *ClickTaskState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ButtonId

	// no validation rules for TaskId

	// no validation rules for FinishStatus

	for idx, item := range m.GetPrizes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClickTaskStateValidationError{
						field:  fmt.Sprintf("Prizes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClickTaskStateValidationError{
						field:  fmt.Sprintf("Prizes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClickTaskStateValidationError{
					field:  fmt.Sprintf("Prizes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SkipTitle

	if len(errors) > 0 {
		return ClickTaskStateMultiError(errors)
	}

	return nil
}

// ClickTaskStateMultiError is an error wrapping multiple validation errors
// returned by ClickTaskState.ValidateAll() if the designated constraints
// aren't met.
type ClickTaskStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClickTaskStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClickTaskStateMultiError) AllErrors() []error { return m }

// ClickTaskStateValidationError is the validation error returned by
// ClickTaskState.Validate if the designated constraints aren't met.
type ClickTaskStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClickTaskStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClickTaskStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClickTaskStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClickTaskStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClickTaskStateValidationError) ErrorName() string { return "ClickTaskStateValidationError" }

// Error satisfies the builtin error interface
func (e ClickTaskStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClickTaskState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClickTaskStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClickTaskStateValidationError{}

// Validate checks the field values on Prize with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Prize) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Prize with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PrizeMultiError, or nil if none found.
func (m *Prize) ValidateAll() error {
	return m.validate(true)
}

func (m *Prize) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrizeId

	// no validation rules for PrizeName

	// no validation rules for PrizeUrl

	if len(errors) > 0 {
		return PrizeMultiError(errors)
	}

	return nil
}

// PrizeMultiError is an error wrapping multiple validation errors returned by
// Prize.ValidateAll() if the designated constraints aren't met.
type PrizeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrizeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrizeMultiError) AllErrors() []error { return m }

// PrizeValidationError is the validation error returned by Prize.Validate if
// the designated constraints aren't met.
type PrizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrizeValidationError) ErrorName() string { return "PrizeValidationError" }

// Error satisfies the builtin error interface
func (e PrizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrizeValidationError{}
